// Code generated by MockGen. DO NOT EDIT.
// Source: helper.go

// Package gitutils is a generated GoMock package.
package gitutils

import (
	context "context"
	reflect "reflect"

	git "github.com/go-git/go-git/v5"
	plumbing "github.com/go-git/go-git/v5/plumbing"
	gomock "github.com/golang/mock/gomock"
)

// MockHelper is a mock of Helper interface.
type MockHelper struct {
	ctrl     *gomock.Controller
	recorder *MockHelperMockRecorder
}

// MockHelperMockRecorder is the mock recorder for MockHelper.
type MockHelperMockRecorder struct {
	mock *MockHelper
}

// NewMockHelper creates a new mock instance.
func NewMockHelper(ctrl *gomock.Controller) *MockHelper {
	mock := &MockHelper{ctrl: ctrl}
	mock.recorder = &MockHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHelper) EXPECT() *MockHelperMockRecorder {
	return m.recorder
}

// GetRemoteRef mocks base method.
func (m *MockHelper) GetRemoteRef(ctx context.Context, remoteName, branchName string) (*plumbing.Reference, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRemoteRef", ctx, remoteName, branchName)
	ret0, _ := ret[0].(*plumbing.Reference)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRemoteRef indicates an expected call of GetRemoteRef.
func (mr *MockHelperMockRecorder) GetRemoteRef(ctx, remoteName, branchName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRemoteRef", reflect.TypeOf((*MockHelper)(nil).GetRemoteRef), ctx, remoteName, branchName)
}

// PushContextWithAuth mocks base method.
func (m *MockHelper) PushContextWithAuth(ctx context.Context, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PushContextWithAuth", ctx, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// PushContextWithAuth indicates an expected call of PushContextWithAuth.
func (mr *MockHelperMockRecorder) PushContextWithAuth(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PushContextWithAuth", reflect.TypeOf((*MockHelper)(nil).PushContextWithAuth), ctx, token)
}

// RecreateRemote mocks base method.
func (m *MockHelper) RecreateRemote(ctx context.Context, remoteNAme, remoteURL string) (*git.Remote, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RecreateRemote", ctx, remoteNAme, remoteURL)
	ret0, _ := ret[0].(*git.Remote)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RecreateRemote indicates an expected call of RecreateRemote.
func (mr *MockHelperMockRecorder) RecreateRemote(ctx, remoteNAme, remoteURL interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RecreateRemote", reflect.TypeOf((*MockHelper)(nil).RecreateRemote), ctx, remoteNAme, remoteURL)
}
