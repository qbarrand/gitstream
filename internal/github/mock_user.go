// Code generated by MockGen. DO NOT EDIT.
// Source: user.go

// Package github is a generated GoMock package.
package github

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v47/github"
)

// MockUserHelper is a mock of UserHelper interface.
type MockUserHelper struct {
	ctrl     *gomock.Controller
	recorder *MockUserHelperMockRecorder
}

// MockUserHelperMockRecorder is the mock recorder for MockUserHelper.
type MockUserHelperMockRecorder struct {
	mock *MockUserHelper
}

// NewMockUserHelper creates a new mock instance.
func NewMockUserHelper(ctrl *gomock.Controller) *MockUserHelper {
	mock := &MockUserHelper{ctrl: ctrl}
	mock.recorder = &MockUserHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserHelper) EXPECT() *MockUserHelperMockRecorder {
	return m.recorder
}

// GetCommitAuthor mocks base method.
func (m *MockUserHelper) GetCommitAuthor(ctx context.Context, sha string) (*github.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitAuthor", ctx, sha)
	ret0, _ := ret[0].(*github.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitAuthor indicates an expected call of GetCommitAuthor.
func (mr *MockUserHelperMockRecorder) GetCommitAuthor(ctx, sha interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitAuthor", reflect.TypeOf((*MockUserHelper)(nil).GetCommitAuthor), ctx, sha)
}
