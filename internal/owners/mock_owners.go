// Code generated by MockGen. DO NOT EDIT.
// Source: owners.go

// Package owners is a generated GoMock package.
package owners

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOwnersHelper is a mock of OwnersHelper interface.
type MockOwnersHelper struct {
	ctrl     *gomock.Controller
	recorder *MockOwnersHelperMockRecorder
}

// MockOwnersHelperMockRecorder is the mock recorder for MockOwnersHelper.
type MockOwnersHelperMockRecorder struct {
	mock *MockOwnersHelper
}

// NewMockOwnersHelper creates a new mock instance.
func NewMockOwnersHelper(ctrl *gomock.Controller) *MockOwnersHelper {
	mock := &MockOwnersHelper{ctrl: ctrl}
	mock.recorder = &MockOwnersHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOwnersHelper) EXPECT() *MockOwnersHelperMockRecorder {
	return m.recorder
}

// FromFile mocks base method.
func (m *MockOwnersHelper) FromFile(filePath string) (*Owners, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FromFile", filePath)
	ret0, _ := ret[0].(*Owners)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FromFile indicates an expected call of FromFile.
func (mr *MockOwnersHelperMockRecorder) FromFile(filePath interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FromFile", reflect.TypeOf((*MockOwnersHelper)(nil).FromFile), filePath)
}

// GetRandomApprover mocks base method.
func (m *MockOwnersHelper) GetRandomApprover(o *Owners) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRandomApprover", o)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRandomApprover indicates an expected call of GetRandomApprover.
func (mr *MockOwnersHelperMockRecorder) GetRandomApprover(o interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRandomApprover", reflect.TypeOf((*MockOwnersHelper)(nil).GetRandomApprover), o)
}

// IsApprover mocks base method.
func (m *MockOwnersHelper) IsApprover(o *Owners, userLogin string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsApprover", o, userLogin)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsApprover indicates an expected call of IsApprover.
func (mr *MockOwnersHelperMockRecorder) IsApprover(o, userLogin interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsApprover", reflect.TypeOf((*MockOwnersHelper)(nil).IsApprover), o, userLogin)
}
